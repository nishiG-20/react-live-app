{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","Component/quizQsn.jsx","Component/mainComponent.jsx","index.js"],"names":["App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","questions","text","options","answer","getQuizQuestions","MainComponent","state","players","name","points","currentQuestion","playerBuzzer","checkTie","players1","sort","plr1","plr2","num","Number","MIN_SAFE_INTEGER","i","length","findMaxScorer","fstPlrScr","reduce","acc","curr","showResult","maxScorerPlayer","console","log","tieNum","Fragment","className","map","plr","setOption","index","s1","alert","setState","hitBuzzorButton","decideColor","showQuestion","opt","type","class","onClick","this","plyr","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10e0a681.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const questions = [\n    {\n        text: \"What is the capital of India\",\n        options: [\"New Delhi\", \"London\", \"Paris\", \"Tokyo\"],\n        answer: 1\n    },\n    {\n        text: \"What is the capital of France\",\n        options: [\"New Delhi\", \"New York\", \"Paris\", \"Rome\"],\n        answer: 3\n    },\n    {\n        text: \"What is the currency of UK\",\n        options: [\"Dollar\", \"Mark\", \"Yen\", \"Pound\"],\n        answer: 4\n    },\n    {\n        text: \"What is the height of Mount Everest\",\n        options: [\"9231 m\", \"8848 m\", \"8027 m\", \"8912 m\"],\n        answer: 2\n    },\n    {\n        text: \"What is the capital of Japan\",\n        options: [\"Beijing\", \"Osaka\", \"Kyoto\", \"Tokyo\"],\n        answer: 4\n    },\n    {\n        text: \"What is the capital of Egypt\",\n        options: [\"Cairo\", \"Teheran\", \"Baghdad\", \"Dubai\"],\n        answer: 1\n    }\n];\n\nexport function getQuizQuestions() {\n    return questions;\n}","import React, { Component } from \"react\";\nimport { getQuizQuestions } from \"./quizQsn\";\n\nclass MainComponent extends Component {\n    state = {\n        players: [\n            {\n                name: \"James\",\n                points: 0,\n            },\n            {\n                name: \"Julia\",\n                points: 0,\n            },\n            {\n                name: \"Mrtha\",\n                points: 0,\n            },\n            {\n                name: \"Steve\",\n                points: 0,\n            },\n        ],\n        questions: getQuizQuestions(),\n        currentQuestion: 0,\n        playerBuzzer: -1,\n    };\n\n    checkTie = () => {\n        let { players } = this.state\n        let players1 = [...players]\n        players1.sort((plr1, plr2) => plr1.points - plr2.points)\n        let num = Number.MIN_SAFE_INTEGER - 1\n\n        for (let i = 0; i < players1.length - 1; i++) {\n            if (players1[i].points === players1[i + 1].points && players1[i].points >= num) {\n                num = players1[i].points\n            }\n        }\n        if (num === Number.MIN_SAFE_INTEGER - 1) {\n            return Number.MIN_SAFE_INTEGER - 1\n        } else {\n            return num\n        }\n\n    }\n\n    findMaxScorer = () => {\n        let { players } = this.state\n        let flag = 0\n        let fstPlrScr = Number.MIN_SAFE_INTEGER - 1\n\n        // players.forEach((plyr, index) => {\n        //     if (plyr.points > fstPlrScr) {\n        //         fstPlrScr = plyr.points\n        //         flag = index\n        //     }\n        // })\n\n        return players.reduce((acc, curr) => {\n            if (curr.points > fstPlrScr) {\n                fstPlrScr = curr.points\n                return curr\n            } else {\n                return acc\n            }\n        }, 0)\n\n    }\n\n    showResult = () => {\n        let { players } = this.state\n\n        //Find Max Scorer Player\n        let maxScorerPlayer = this.findMaxScorer()\n        console.log('maxScorerPlayer= ' + maxScorerPlayer.points)\n\n        //Find Tie Condition\n        let tieNum = this.checkTie()\n        console.log('tieNum= ' + tieNum)\n\n        return (\n            <React.Fragment>\n                <div className=\"row\">\n                    <div className=\"col text-center\">\n                        {\n                            maxScorerPlayer.points > tieNum\n                                ? <React.Fragment>\n                                    <h2>Game Over</h2>\n                                    <h3 className=\"text-primary bg-light\">The Winnner is {maxScorerPlayer.name}</h3>\n                                </React.Fragment>\n                                : <React.Fragment>\n                                    <h2>Game Tie</h2>\n                                    <h3 className=\"text-primary bg-light\">\n                                        The Winners are :\n                                        {\n                                            players.map(plr => {\n                                                if (plr.points === tieNum) {\n                                                    return plr.name\n                                                }\n                                            })\n                                        }\n                                    </h3>\n                                </React.Fragment>\n                        }\n\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    setOption = (index) => {\n        let s1 = { ...this.state }\n        if (s1.playerBuzzer > -1) {\n            if (s1.questions[s1.currentQuestion].answer === index + 1) {\n                alert('Correct Answer: You get Three Point')\n                s1.currentQuestion++\n                s1.players[s1.playerBuzzer].points = s1.players[s1.playerBuzzer].points + 3\n            } else {\n                alert('Wrong Answer: You loose 1 Point')\n                s1.currentQuestion++\n                s1.players[s1.playerBuzzer].points = s1.players[s1.playerBuzzer].points - 1\n            }\n        } else {\n            alert('Press Buzzer please')\n        }\n        s1.playerBuzzer = -1\n        this.setState(s1)\n    }\n\n    hitBuzzorButton = (index) => {\n        let s1 = { ...this.state }\n        s1.playerBuzzer = index\n        this.setState(s1)\n    }\n\n    decideColor = (index) => {\n        let { playerBuzzer } = this.state\n        if (index === playerBuzzer) {\n            return \"bg-danger\"\n        } else {\n            return 'bg-warning'\n        }\n    }\n\n    showQuestion = () => {\n        let { currentQuestion, questions } = this.state\n        return (\n            <React.Fragment>\n                <h3 className=\"text-center my-2\">Question Number: {currentQuestion + 1}</h3>\n                <h4 className=\"text-center\">\n                    {questions[currentQuestion].text}\n                </h4>\n\n                <div className=\"row\">\n\n                    <div className=\"col\">\n                        <div className=\"row\">\n                            {\n                                questions[currentQuestion].options.map((opt, index) => {\n                                    return (\n                                        <div className=\"col\">\n                                            <button type=\"button\" class=\"btn btn-info\" onClick={() => this.setOption(index)}>{opt}</button>\n                                        </div>\n                                    )\n                                })\n                            }\n                        </div>\n                    </div>\n\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        let { players, currentQuestion, questions } = this.state;\n        return (\n            <div className=\"container\">\n                <h1 className=\"text-center\">Welcome to the Quiz Contest</h1>\n                <h3 className=\"text-center\">Participants</h3>\n                <div className=\"row\">\n                    {players.map((plyr, index) => {\n                        return (\n                            <React.Fragment>\n                                <div className={\"col-2 border text-center bg-warning \" + this.decideColor(index)}>\n                                    <h4>Name:{plyr.name}</h4>\n                                    <h5>Score:{plyr.points}</h5>\n                                    <button type=\"button\" onClick={() => this.hitBuzzorButton(index)}>BUZZER</button>\n                                </div>\n                                <div className=\"col-1\"></div>\n                            </React.Fragment>\n                        );\n                    })}\n                </div>\n                {currentQuestion === questions.length ? this.showResult() : this.showQuestion()}\n            </div>\n        );\n    }\n}\nexport default MainComponent;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport MainComponent from './Component/mainComponent'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    < MainComponent />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}